<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bin\SZC_motion_1B6S.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bin\SZC_motion_1B6S.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Dec 03 17:51:38 2021
<BR><P>
<H3>Maximum Stack Usage =        300 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">am_nmi_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">am_nmi_isr</a><BR>
 <LI><a href="#[18]">am_adc_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">am_adc_isr</a><BR>
 <LI><a href="#[8b]">compile_layers</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8b]">compile_layers</a><BR>
 <LI><a href="#[40]">am_memmanage_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">am_memmanage_isr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">Reset_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_keil.o(RESET)
 <LI><a href="#[18]">am_adc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[8]">am_brownout_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[37]">am_bsp_itm_string_print</a> from am_bsp.o(i.am_bsp_itm_string_print) referenced from main.o(i.main)
 <LI><a href="#[a]">am_clkgen_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[15]">am_ctimer_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[5]">am_debugmon_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3]">am_fault_isr</a> from am_util_faultisr.o(.emb_text) referenced 4 times from startup_keil.o(RESET)
 <LI><a href="#[23]">am_flash_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[14]">am_gpio_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[e]">am_iomaster0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[f]">am_iomaster1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[10]">am_iomaster2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[11]">am_iomaster3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[12]">am_iomaster4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[13]">am_iomaster5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[d]">am_ioslave_acc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[c]">am_ioslave_ios_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2]">am_nmi_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[19]">am_pdm0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[6]">am_pendsv_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[24]">am_software0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[25]">am_software1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[26]">am_software2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[27]">am_software3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1b]">am_stimer_cmpr0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1c]">am_stimer_cmpr1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1d]">am_stimer_cmpr2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1e]">am_stimer_cmpr3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1f]">am_stimer_cmpr4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[20]">am_stimer_cmpr5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[21]">am_stimer_cmpr6_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[22]">am_stimer_cmpr7_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1a]">am_stimer_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4]">am_svcall_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[7]">am_systick_isr</a> from am_time.o(i.am_systick_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[17]">am_uart1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[16]">am_uart_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[b]">am_vcomp_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[9]">am_watchdog_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[30]">conv2d_build</a> from nnom_conv2d.o(i.conv2d_build) referenced from nnom_conv2d.o(i.conv2d_s)
 <LI><a href="#[31]">conv2d_free</a> from nnom_conv2d.o(i.conv2d_free) referenced from nnom_conv2d.o(i.conv2d_s)
 <LI><a href="#[2f]">conv2d_run</a> from nnom_conv2d.o(i.conv2d_run) referenced from nnom_conv2d.o(i.conv2d_s)
 <LI><a href="#[3e]">default_build</a> from nnom_baselayer.o(i.default_build) referenced from nnom_output.o(i.output_s)
 <LI><a href="#[33]">dense_build</a> from nnom_dense.o(i.dense_build) referenced from nnom_dense.o(i.dense_s)
 <LI><a href="#[34]">dense_free</a> from nnom_dense.o(i.dense_free) referenced from nnom_dense.o(i.dense_s)
 <LI><a href="#[32]">dense_run</a> from nnom_dense.o(i.dense_run) referenced from nnom_dense.o(i.dense_s)
 <LI><a href="#[2b]">flatten_build</a> from nnom_flatten.o(i.flatten_build) referenced from nnom_flatten.o(i.Flatten)
 <LI><a href="#[2a]">flatten_run</a> from nnom_flatten.o(i.flatten_run) referenced from nnom_flatten.o(i.Flatten)
 <LI><a href="#[36]">input_build</a> from nnom_input.o(i.input_build) referenced from nnom_input.o(i.input_s)
 <LI><a href="#[35]">input_run</a> from nnom_input.o(i.input_run) referenced from nnom_input.o(i.input_s)
 <LI><a href="#[29]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2d]">maxpool_build</a> from nnom_maxpool.o(i.maxpool_build) referenced from nnom_maxpool.o(i.MaxPool)
 <LI><a href="#[2c]">maxpool_run</a> from nnom_maxpool.o(i.maxpool_run) referenced from nnom_maxpool.o(i.MaxPool)
 <LI><a href="#[3c]">model_active</a> from nnom.o(i.model_active) referenced from nnom.o(i.new_model)
 <LI><a href="#[38]">model_add</a> from nnom.o(i.model_add) referenced from nnom.o(i.new_model)
 <LI><a href="#[39]">model_hook</a> from nnom.o(i.model_hook) referenced from nnom.o(i.new_model)
 <LI><a href="#[3a]">model_merge</a> from nnom.o(i.model_merge) referenced from nnom.o(i.new_model)
 <LI><a href="#[3b]">model_mergex</a> from nnom.o(i.model_mergex) referenced from nnom.o(i.new_model)
 <LI><a href="#[3d]">output_run</a> from nnom_output.o(i.output_run) referenced from nnom_output.o(i.output_s)
 <LI><a href="#[2e]">relu_run</a> from nnom_activation.o(i.relu_run) referenced from nnom_activation.o(i.act_relu)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3f]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_keil.o(RESET))

<P><STRONG><a name="[2]"></a>am_nmi_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_nmi_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_nmi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>am_memmanage_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_memmanage_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_memmanage_isr
</UL>

<P><STRONG><a name="[18]"></a>am_adc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>am_brownout_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>am_clkgen_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>am_ctimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>am_debugmon_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>am_flash_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>am_gpio_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>am_iomaster0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>am_iomaster1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>am_iomaster2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>am_iomaster3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>am_iomaster4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>am_iomaster5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>am_ioslave_acc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>am_ioslave_ios_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>am_pdm0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>am_pendsv_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>am_software0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>am_software1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>am_software2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>am_software3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>am_stimer_cmpr0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>am_stimer_cmpr1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>am_stimer_cmpr2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>am_stimer_cmpr3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>am_stimer_cmpr4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>am_stimer_cmpr5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>am_stimer_cmpr6_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>am_stimer_cmpr7_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>am_stimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>am_svcall_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>am_uart0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[17]"></a>am_uart1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>am_uart_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>am_vcomp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>am_watchdog_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[42]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[48]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ca]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[cb]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[cc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[cd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[3]"></a>am_fault_isr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = am_fault_isr &rArr; am_util_faultisr_collect_data
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>getStackedReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[ce]"></a>am_hal_interrupt_master_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text), UNUSED)

<P><STRONG><a name="[5e]"></a>am_hal_interrupt_master_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_clear
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBuckZX
</UL>

<P><STRONG><a name="[5f]"></a>am_hal_interrupt_master_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_clear
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBuckZX
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
</UL>

<P><STRONG><a name="[cf]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_BIG
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[d7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[da]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>Flatten</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nnom_flatten.o(i.Flatten))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flatten &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
</UL>

<P><STRONG><a name="[4c]"></a>Infer_BIG</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.Infer_BIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Infer_BIG &rArr; nnom_model_create_B &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Infer_SMALL</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, main.o(i.Infer_SMALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Infer_SMALL &rArr; nnom_model_create_S5 &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>MaxPool</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, nnom_maxpool.o(i.MaxPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MaxPool &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
</UL>

<P><STRONG><a name="[db]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[dc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[dd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[97]"></a>act_get_dec_bit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nnom_activation.o(i.act_get_dec_bit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
</UL>

<P><STRONG><a name="[59]"></a>act_relu</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nnom_activation.o(i.act_relu))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = act_relu &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[5c]"></a>am_bsp_debug_printf_enable</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, am_bsp.o(i.am_bsp_debug_printf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = am_bsp_debug_printf_enable &rArr; am_hal_tpiu_enable &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>am_bsp_itm_string_print</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, am_bsp.o(i.am_bsp_itm_string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_bsp_itm_string_print &rArr; am_hal_itm_print
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[61]"></a>am_bsp_low_power_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, am_bsp.o(i.am_bsp_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_bsp_low_power_init &rArr; am_hal_pwrctrl_bucks_init &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_osc_stop
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_select
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_disable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_vcomp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>am_devices_led_array_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am_devices_led.o(i.am_devices_led_array_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_devices_led_array_init &rArr; am_devices_led_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>am_devices_led_array_out</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, am_devices_led.o(i.am_devices_led_array_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = am_devices_led_array_out &rArr; am_devices_led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_on
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>am_devices_led_init</STRONG> (Thumb, 560 bytes, Stack size 16 bytes, am_devices_led.o(i.am_devices_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_devices_led_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_array_init
</UL>

<P><STRONG><a name="[6c]"></a>am_devices_led_off</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, am_devices_led.o(i.am_devices_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_devices_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_array_out
</UL>

<P><STRONG><a name="[6b]"></a>am_devices_led_on</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, am_devices_led.o(i.am_devices_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_devices_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_array_out
</UL>

<P><STRONG><a name="[6d]"></a>am_hal_cachectrl_enable</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, am_hal_cachectrl.o(i.am_hal_cachectrl_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am_hal_cachectrl_enable &rArr; am_hal_pwrctrl_memory_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_memory_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>am_hal_clkgen_osc_stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_osc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[7a]"></a>am_hal_clkgen_sysclk_get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_sysclk_get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
</UL>

<P><STRONG><a name="[b1]"></a>am_hal_clkgen_sysclk_select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_sysclk_select))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>am_hal_ctimer_clear</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, am_hal_ctimer.o(i.am_hal_ctimer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_ctimer_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>

<P><STRONG><a name="[70]"></a>am_hal_ctimer_period_set</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, am_hal_ctimer.o(i.am_hal_ctimer_period_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>

<P><STRONG><a name="[71]"></a>am_hal_ctimer_start</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, am_hal_ctimer.o(i.am_hal_ctimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_ctimer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>

<P><STRONG><a name="[75]"></a>am_hal_flash_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, am_hal_flash.o(i.am_hal_flash_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_disable
</UL>

<P><STRONG><a name="[b3]"></a>am_hal_itm_enable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, am_hal_itm.o(i.am_hal_itm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>am_hal_itm_print</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, am_hal_itm.o(i.am_hal_itm_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_itm_print
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_stimulus_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_string_print
</UL>

<P><STRONG><a name="[72]"></a>am_hal_itm_stimulus_reg_byte_write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_itm.o(i.am_hal_itm_stimulus_reg_byte_write))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_print
</UL>

<P><STRONG><a name="[7e]"></a>am_hal_mcuctrl_fault_status</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_fault_status))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[73]"></a>am_hal_pwrctrl_bucks_disable</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_bucks_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_pwrctrl_bucks_disable &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRev_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>

<P><STRONG><a name="[76]"></a>am_hal_pwrctrl_bucks_enable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_bucks_enable))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_init
</UL>

<P><STRONG><a name="[62]"></a>am_hal_pwrctrl_bucks_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_bucks_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_pwrctrl_bucks_init &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[63]"></a>am_hal_pwrctrl_low_power_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_low_power_init))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[6e]"></a>am_hal_pwrctrl_memory_enable</STRONG> (Thumb, 368 bytes, Stack size 20 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_memory_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_hal_pwrctrl_memory_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_enable
</UL>

<P><STRONG><a name="[67]"></a>am_hal_rtc_osc_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[65]"></a>am_hal_rtc_osc_select</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_select))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[77]"></a>am_hal_sysctrl_sleep</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, am_hal_sysctrl.o(i.am_hal_sysctrl_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = am_hal_sysctrl_sleep &rArr; am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBuckZX
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckZX_chk
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>am_hal_tpiu_enable</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, am_hal_tpiu.o(i.am_hal_tpiu_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_tpiu_enable &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
</UL>

<P><STRONG><a name="[64]"></a>am_hal_vcomp_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_vcomp.o(i.am_hal_vcomp_disable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[7]"></a>am_systick_isr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_time.o(i.am_systick_isr))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>am_util_delay_ms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, am_util_delay.o(i.am_util_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_util_delay_ms &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>am_util_faultisr_collect_data</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, am_util_faultisr.o(i.am_util_faultisr_collect_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = am_util_faultisr_collect_data
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_fault_status
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStackedReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_fault_isr
</UL>

<P><STRONG><a name="[7f]"></a>am_util_stdio_printf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, am_util_stdio.o(i.am_util_stdio_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>am_util_stdio_printf_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_util_stdio.o(i.am_util_stdio_printf_init))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>am_util_stdio_vsprintf</STRONG> (Thumb, 932 bytes, Stack size 96 bytes, am_util_stdio.o(i.am_util_stdio_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_hexstr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strlen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padbuffer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_hex
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>

<P><STRONG><a name="[b9]"></a>block_mem_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nnom.o(i.block_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[c2]"></a>check_model_version</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, nnom.o(i.check_model_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_model_version
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[8b]"></a>compile_layers</STRONG> (Thumb, 650 bytes, Stack size 64 bytes, nnom.o(i.compile_layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_hook_length
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_memory_block_info
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_shortcut_add
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_block
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[30]"></a>conv2d_build</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, nnom_conv2d.o(i.conv2d_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = conv2d_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_output_length
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(i.conv2d_s)
</UL>
<P><STRONG><a name="[31]"></a>conv2d_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nnom_conv2d.o(i.conv2d_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conv2d_free &rArr; delete_tensor &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(i.conv2d_s)
</UL>
<P><STRONG><a name="[2f]"></a>conv2d_run</STRONG> (Thumb, 306 bytes, Stack size 96 bytes, nnom_conv2d.o(i.conv2d_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = conv2d_run &rArr; local_convolve_HWC_q15_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(i.conv2d_s)
</UL>
<P><STRONG><a name="[9c]"></a>conv2d_s</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, nnom_conv2d.o(i.conv2d_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = conv2d_s &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[98]"></a>conv_output_length</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nnom_conv2d.o(i.conv_output_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = conv_output_length
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
</UL>

<P><STRONG><a name="[3e]"></a>default_build</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nnom_baselayer.o(i.default_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = default_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_output.o(i.output_s)
</UL>
<P><STRONG><a name="[99]"></a>delete_tensor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nnom_tensor.o(i.delete_tensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delete_tensor &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_free
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_free
</UL>

<P><STRONG><a name="[33]"></a>dense_build</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nnom_dense.o(i.dense_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dense_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(i.dense_s)
</UL>
<P><STRONG><a name="[34]"></a>dense_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nnom_dense.o(i.dense_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dense_free &rArr; delete_tensor &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(i.dense_s)
</UL>
<P><STRONG><a name="[32]"></a>dense_run</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, nnom_dense.o(i.dense_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = dense_run &rArr; local_fully_connected_q7_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_q7_opt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(i.dense_s)
</UL>
<P><STRONG><a name="[a4]"></a>dense_s</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nnom_dense.o(i.dense_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dense_s &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[9f]"></a>dilation</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom_layers.o(i.dilation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dilation &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[2b]"></a>flatten_build</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, nnom_flatten.o(i.flatten_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flatten_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_flatten.o(i.Flatten)
</UL>
<P><STRONG><a name="[2a]"></a>flatten_run</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nnom_flatten.o(i.flatten_run))
<BR>[Address Reference Count : 1]<UL><LI> nnom_flatten.o(i.Flatten)
</UL>
<P><STRONG><a name="[a6]"></a>flatten_s</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nnom_flatten.o(i.flatten_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = flatten_s &rArr; Flatten &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[a1]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tensor_delete
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_list_delete
</UL>

<P><STRONG><a name="[36]"></a>input_build</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nnom_input.o(i.input_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = input_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_input.o(i.input_s)
</UL>
<P><STRONG><a name="[35]"></a>input_run</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nnom_input.o(i.input_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = input_run &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_input.o(i.input_s)
</UL>
<P><STRONG><a name="[a8]"></a>input_s</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, nnom_input.o(i.input_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = input_s &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
</UL>

<P><STRONG><a name="[4b]"></a>io_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nnom_layers.o(i.io_init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[9d]"></a>kernel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom_layers.o(i.kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kernel &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[be]"></a>layer_run</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nnom.o(i.layer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = layer_run
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
</UL>

<P><STRONG><a name="[9a]"></a>local_convolve_HWC_q15_nonsquare</STRONG> (Thumb, 532 bytes, Stack size 128 bytes, nnom_local_q15.o(i.local_convolve_HWC_q15_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = local_convolve_HWC_q15_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[9b]"></a>local_convolve_HWC_q7_nonsquare</STRONG> (Thumb, 502 bytes, Stack size 112 bytes, nnom_local.o(i.local_convolve_HWC_q7_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = local_convolve_HWC_q7_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[a3]"></a>local_fully_connected_q7_opt</STRONG> (Thumb, 672 bytes, Stack size 88 bytes, nnom_local.o(i.local_fully_connected_q7_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = local_fully_connected_q7_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
</UL>

<P><STRONG><a name="[b4]"></a>local_maxpool_q7_HWC</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, nnom_local.o(i.local_maxpool_q7_HWC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = local_maxpool_q7_HWC
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_run
</UL>

<P><STRONG><a name="[c5]"></a>local_relu_q15</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nnom_local_q15.o(i.local_relu_q15))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
</UL>

<P><STRONG><a name="[c6]"></a>local_relu_q7</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nnom_local.o(i.local_relu_q7))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = main &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_select
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_array_out
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_led_array_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_BIG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c1]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[2d]"></a>maxpool_build</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, nnom_maxpool.o(i.maxpool_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = maxpool_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_maxpool.o(i.MaxPool)
</UL>
<P><STRONG><a name="[2c]"></a>maxpool_run</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, nnom_maxpool.o(i.maxpool_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = maxpool_run &rArr; local_maxpool_q7_HWC
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_maxpool_q7_HWC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_maxpool.o(i.MaxPool)
</UL>
<P><STRONG><a name="[b5]"></a>maxpool_s</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, nnom_maxpool.o(i.maxpool_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = maxpool_s &rArr; MaxPool &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[b8]"></a>mem_analysis_result</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nnom.o(i.mem_analysis_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_analysis_result
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[b7]"></a>model_compile</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nnom.o(i.model_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_mem_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tailed_activation
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_analysis_result
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mem_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_set_ops
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[50]"></a>model_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nnom.o(i.model_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = model_delete &rArr; layer_delete &rArr; io_list_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_BIG
</UL>

<P><STRONG><a name="[4f]"></a>model_run</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nnom.o(i.model_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = model_run &rArr; model_run_to &rArr; layer_run
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_BIG
</UL>

<P><STRONG><a name="[bd]"></a>model_run_to</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nnom.o(i.model_run_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = model_run_to &rArr; layer_run
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_run
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
</UL>

<P><STRONG><a name="[c0]"></a>new_model</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nnom.o(i.new_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = new_model &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[95]"></a>new_tensor</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nnom_tensor.o(i.new_tensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>

<P><STRONG><a name="[8e]"></a>nnom_alignto</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nnom.o(i.nnom_alignto))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[94]"></a>nnom_hook_length</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nnom.o(i.nnom_hook_length))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[4a]"></a>nnom_mem</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nnom.o(i.nnom_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_io
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_hook
</UL>

<P><STRONG><a name="[3d]"></a>output_run</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nnom_output.o(i.output_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = output_run &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_output.o(i.output_s)
</UL>
<P><STRONG><a name="[c3]"></a>output_s</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nnom_output.o(i.output_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = output_s &rArr; input_s &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_S0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create_B
</UL>

<P><STRONG><a name="[bb]"></a>set_tailed_activation</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, nnom.o(i.set_tailed_activation))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[a5]"></a>shape</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nnom_layers.o(i.shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shape
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
</UL>

<P><STRONG><a name="[9e]"></a>stride</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom_layers.o(i.stride))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stride &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[96]"></a>tensor_cpy_attr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nnom_tensor.o(i.tensor_cpy_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tensor_cpy_attr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
</UL>

<P><STRONG><a name="[a0]"></a>tensor_get_num_channel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nnom_tensor.o(i.tensor_get_num_channel))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
</UL>

<P><STRONG><a name="[ba]"></a>tensor_mem_set</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nnom.o(i.tensor_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tensor_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[a2]"></a>tensor_set_attr</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nnom_tensor.o(i.tensor_set_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tensor_set_attr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
</UL>

<P><STRONG><a name="[a9]"></a>tensor_set_attr_v</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, nnom_tensor.o(i.tensor_set_attr_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tensor_set_attr_v &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>

<P><STRONG><a name="[8d]"></a>tensor_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nnom_tensor.o(i.tensor_size))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>nnom_model_create_B</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, main.o(i.nnom_model_create_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nnom_model_create_B &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_BIG
</UL>

<P><STRONG><a name="[52]"></a>nnom_model_create_S0</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, main.o(i.nnom_model_create_S0))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nnom_model_create_S0 &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
</UL>

<P><STRONG><a name="[53]"></a>nnom_model_create_S1</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, main.o(i.nnom_model_create_S1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nnom_model_create_S1 &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
</UL>

<P><STRONG><a name="[54]"></a>nnom_model_create_S2</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, main.o(i.nnom_model_create_S2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nnom_model_create_S2 &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
</UL>

<P><STRONG><a name="[55]"></a>nnom_model_create_S3</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, main.o(i.nnom_model_create_S3))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nnom_model_create_S3 &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
</UL>

<P><STRONG><a name="[56]"></a>nnom_model_create_S4</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, main.o(i.nnom_model_create_S4))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nnom_model_create_S4 &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
</UL>

<P><STRONG><a name="[57]"></a>nnom_model_create_S5</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, main.o(i.nnom_model_create_S5))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nnom_model_create_S5 &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infer_SMALL
</UL>

<P><STRONG><a name="[81]"></a>decstr_to_int</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, am_util_stdio.o(i.decstr_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = decstr_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[bf]"></a>divu64_10</STRONG> (Thumb, 204 bytes, Stack size 36 bytes, am_util_stdio.o(i.divu64_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>

<P><STRONG><a name="[8a]"></a>ftoa</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, am_util_stdio.o(i.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[84]"></a>ndigits_in_hex</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, am_util_stdio.o(i.ndigits_in_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndigits_in_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[88]"></a>ndigits_in_i64</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ndigits_in_i64 &rArr; ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[86]"></a>ndigits_in_u64</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
</UL>

<P><STRONG><a name="[83]"></a>padbuffer</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, am_util_stdio.o(i.padbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = padbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[82]"></a>simple_strlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, am_util_stdio.o(i.simple_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[85]"></a>uint64_to_hexstr</STRONG> (Thumb, 138 bytes, Stack size 44 bytes, am_util_stdio.o(i.uint64_to_hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uint64_to_hexstr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[87]"></a>uint64_to_str</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, am_util_stdio.o(i.uint64_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[b0]"></a>__NNOM_SSAT</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, nnom_local.o(i.__NNOM_SSAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_q7_opt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
</UL>

<P><STRONG><a name="[af]"></a>__NNOM_SSAT</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, nnom_local_q15.o(i.__NNOM_SSAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
</UL>

<P><STRONG><a name="[8c]"></a>allocate_block</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nnom.o(i.allocate_block))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[5a]"></a>allocate_hook</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nnom.o(i.allocate_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = allocate_hook &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>

<P><STRONG><a name="[5b]"></a>allocate_io</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nnom.o(i.allocate_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = allocate_io &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>

<P><STRONG><a name="[b6]"></a>find_last</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nnom.o(i.find_last))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_add
</UL>

<P><STRONG><a name="[aa]"></a>io_list_delete</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nnom.o(i.io_list_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = io_list_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
</UL>

<P><STRONG><a name="[ab]"></a>io_mem_size</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nnom.o(i.io_mem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_mem_size
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
</UL>

<P><STRONG><a name="[ac]"></a>io_tensor_delete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nnom.o(i.io_tensor_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_tensor_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
</UL>

<P><STRONG><a name="[ad]"></a>layer_delete</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nnom.o(i.layer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = layer_delete &rArr; io_list_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tensor_delete
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_list_delete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
</UL>

<P><STRONG><a name="[8f]"></a>layer_shortcut_add</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nnom.o(i.layer_shortcut_add))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[3c]"></a>model_active</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nnom.o(i.model_active))
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[38]"></a>model_add</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nnom.o(i.model_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = model_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[39]"></a>model_hook</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nnom.o(i.model_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_io
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_mergex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[3a]"></a>model_merge</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom.o(i.model_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = model_merge &rArr; model_mergex &rArr; model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_mergex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[3b]"></a>model_mergex</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, nnom.o(i.model_mergex))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = model_mergex &rArr; model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_merge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[bc]"></a>model_set_ops</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nnom.o(i.model_set_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = model_set_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[90]"></a>print_layer_info</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nnom.o(i.print_layer_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_layer_info &rArr; io_mem_size
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[91]"></a>print_memory_block_info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nnom.o(i.print_memory_block_info))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[c4]"></a>release_block</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nnom.o(i.release_block))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
</UL>

<P><STRONG><a name="[92]"></a>release_comp_mem</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nnom.o(i.release_comp_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = release_comp_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[93]"></a>release_input_mem</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom.o(i.release_input_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = release_input_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[2e]"></a>relu_run</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nnom_activation.o(i.relu_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = relu_run
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_relu_q7
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_relu_q15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(i.act_relu)
</UL>
<P><STRONG><a name="[74]"></a>isRev_ADC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am_hal_pwrctrl.o(i.isRev_ADC))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_bucks_disable
</UL>

<P><STRONG><a name="[78]"></a>buckZX_chk</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, am_hal_sysctrl.o(i.buckZX_chk))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>

<P><STRONG><a name="[79]"></a>setBuckZX</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, am_hal_sysctrl.o(i.setBuckZX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setBuckZX
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
